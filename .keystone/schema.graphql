type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

input CartItemRelateToManyInput {
  create: [CartItemCreateInput]
  connect: [CartItemWhereUniqueInput]
  disconnect: [CartItemWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  avatar: CloudinaryImage_File
  products(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product!]!
  _productsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  cart(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): [CartItem!]!
  _cartMeta(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  avatar: String
  avatar_not: String
  avatar_in: [String]
  avatar_not_in: [String]

  """ condition must be true for all nodes """
  products_every: ProductWhereInput

  """ condition must be true for at least 1 node """
  products_some: ProductWhereInput

  """ condition must be false for all nodes """
  products_none: ProductWhereInput

  """ condition must be true for all nodes """
  cart_every: CartItemWhereInput

  """ condition must be true for at least 1 node """
  cart_some: CartItemWhereInput

  """ condition must be false for all nodes """
  cart_none: CartItemWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  products_ASC
  products_DESC
  cart_ASC
  cart_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  avatar: Upload
  products: ProductRelateToManyInput
  cart: CartItemRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  avatar: Upload
  products: ProductRelateToManyInput
  cart: CartItemRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input TagRelateToManyInput {
  create: [TagCreateInput]
  connect: [TagWhereUniqueInput]
  disconnect: [TagWhereUniqueInput]
  disconnectAll: Boolean
}

input BrandRelateToOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: BrandWhereUniqueInput
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Product {
  id: ID!
  name: String
  type: String
  description: String
  image: CloudinaryImage_File
  status: String
  price: Int
  discount: Int
  stock: Int
  tags(where: TagWhereInput, search: String, sortBy: [SortTagsBy!], orderBy: String, first: Int, skip: Int): [Tag!]!
  _tagsMeta(where: TagWhereInput, search: String, sortBy: [SortTagsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  brand: Brand
  seller: User
}

input ProductWhereInput {
  AND: [ProductWhereInput]
  OR: [ProductWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  type: String
  type_not: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  type_i: String
  type_not_i: String
  type_contains_i: String
  type_not_contains_i: String
  type_starts_with_i: String
  type_not_starts_with_i: String
  type_ends_with_i: String
  type_not_ends_with_i: String
  type_in: [String]
  type_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  discount: Int
  discount_not: Int
  discount_lt: Int
  discount_lte: Int
  discount_gt: Int
  discount_gte: Int
  discount_in: [Int]
  discount_not_in: [Int]
  stock: Int
  stock_not: Int
  stock_lt: Int
  stock_lte: Int
  stock_gt: Int
  stock_gte: Int
  stock_in: [Int]
  stock_not_in: [Int]

  """ condition must be true for all nodes """
  tags_every: TagWhereInput

  """ condition must be true for at least 1 node """
  tags_some: TagWhereInput

  """ condition must be false for all nodes """
  tags_none: TagWhereInput
  brand: BrandWhereInput
  brand_is_null: Boolean
  seller: UserWhereInput
  seller_is_null: Boolean
}

input ProductWhereUniqueInput {
  id: ID!
}

enum SortProductsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  price_ASC
  price_DESC
  discount_ASC
  discount_DESC
  stock_ASC
  stock_DESC
  tags_ASC
  tags_DESC
  brand_ASC
  brand_DESC
  seller_ASC
  seller_DESC
}

input ProductUpdateInput {
  name: String
  type: String
  description: String
  image: Upload
  status: String
  price: Int
  discount: Int
  stock: Int
  tags: TagRelateToManyInput
  brand: BrandRelateToOneInput
  seller: UserRelateToOneInput
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

input ProductCreateInput {
  name: String
  type: String
  description: String
  image: Upload
  status: String
  price: Int
  discount: Int
  stock: Int
  tags: TagRelateToManyInput
  brand: BrandRelateToOneInput
  seller: UserRelateToOneInput
}

input ProductsCreateInput {
  data: ProductCreateInput
}

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type CartItem {
  id: ID!
  quantity: Int
  product: Product
  user: User
}

input CartItemWhereInput {
  AND: [CartItemWhereInput]
  OR: [CartItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  product: ProductWhereInput
  product_is_null: Boolean
  user: UserWhereInput
  user_is_null: Boolean
}

input CartItemWhereUniqueInput {
  id: ID!
}

enum SortCartItemsBy {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  product_ASC
  product_DESC
  user_ASC
  user_DESC
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneInput
  user: UserRelateToOneInput
}

input CartItemsUpdateInput {
  id: ID!
  data: CartItemUpdateInput
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneInput
  user: UserRelateToOneInput
}

input CartItemsCreateInput {
  data: CartItemCreateInput
}

input SubCategoryRelateToManyInput {
  create: [SubCategoryCreateInput]
  connect: [SubCategoryWhereUniqueInput]
  disconnect: [SubCategoryWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Category {
  id: ID!
  name: String
  sub(where: SubCategoryWhereInput, search: String, sortBy: [SortSubCategoriesBy!], orderBy: String, first: Int, skip: Int): [SubCategory!]!
  _subMeta(where: SubCategoryWhereInput, search: String, sortBy: [SortSubCategoriesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input CategoryWhereInput {
  AND: [CategoryWhereInput]
  OR: [CategoryWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """ condition must be true for all nodes """
  sub_every: SubCategoryWhereInput

  """ condition must be true for at least 1 node """
  sub_some: SubCategoryWhereInput

  """ condition must be false for all nodes """
  sub_none: SubCategoryWhereInput
}

input CategoryWhereUniqueInput {
  id: ID!
}

enum SortCategoriesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sub_ASC
  sub_DESC
}

input CategoryUpdateInput {
  name: String
  sub: SubCategoryRelateToManyInput
}

input CategoriesUpdateInput {
  id: ID!
  data: CategoryUpdateInput
}

input CategoryCreateInput {
  name: String
  sub: SubCategoryRelateToManyInput
}

input CategoriesCreateInput {
  data: CategoryCreateInput
}

input CategoryRelateToOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: CategoryWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type SubCategory {
  id: ID!
  name: String
  parent: Category
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput]
  OR: [SubCategoryWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  parent: CategoryWhereInput
  parent_is_null: Boolean
}

input SubCategoryWhereUniqueInput {
  id: ID!
}

enum SortSubCategoriesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  parent_ASC
  parent_DESC
}

input SubCategoryUpdateInput {
  name: String
  parent: CategoryRelateToOneInput
}

input SubCategoriesUpdateInput {
  id: ID!
  data: SubCategoryUpdateInput
}

input SubCategoryCreateInput {
  name: String
  parent: CategoryRelateToOneInput
}

input SubCategoriesCreateInput {
  data: SubCategoryCreateInput
}

""" A keystone list """
type Brand {
  id: ID!
  name: String
}

input BrandWhereInput {
  AND: [BrandWhereInput]
  OR: [BrandWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
}

input BrandWhereUniqueInput {
  id: ID!
}

enum SortBrandsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input BrandUpdateInput {
  name: String
}

input BrandsUpdateInput {
  id: ID!
  data: BrandUpdateInput
}

input BrandCreateInput {
  name: String
}

input BrandsCreateInput {
  data: BrandCreateInput
}

""" A keystone list """
type Tag {
  id: ID!
  name: String
  products(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product!]!
  _productsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input TagWhereInput {
  AND: [TagWhereInput]
  OR: [TagWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """ condition must be true for all nodes """
  products_every: ProductWhereInput

  """ condition must be true for at least 1 node """
  products_some: ProductWhereInput

  """ condition must be false for all nodes """
  products_none: ProductWhereInput
}

input TagWhereUniqueInput {
  id: ID!
}

enum SortTagsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  products_ASC
  products_DESC
}

input TagUpdateInput {
  name: String
  products: ProductRelateToManyInput
}

input TagsUpdateInput {
  id: ID!
  data: TagUpdateInput
}

input TagCreateInput {
  name: String
  products: ProductRelateToManyInput
}

input TagsCreateInput {
  data: TagCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Product items which match the where clause. """
  allProducts(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product]

  """ Search for the Product item with the matching ID. """
  Product(where: ProductWhereUniqueInput!): Product

  """ Perform a meta-query on all Product items which match the where clause. 
  """
  _allProductsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Product list. """
  _ProductsMeta: _ListMeta

  """ Search for all CartItem items which match the where clause. """
  allCartItems(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): [CartItem]

  """ Search for the CartItem item with the matching ID. """
  CartItem(where: CartItemWhereUniqueInput!): CartItem

  """ Perform a meta-query on all CartItem items which match the where clause. 
  """
  _allCartItemsMeta(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the CartItem list. """
  _CartItemsMeta: _ListMeta

  """ Search for all Category items which match the where clause. """
  allCategories(where: CategoryWhereInput, search: String, sortBy: [SortCategoriesBy!], orderBy: String, first: Int, skip: Int): [Category]

  """ Search for the Category item with the matching ID. """
  Category(where: CategoryWhereUniqueInput!): Category

  """ Perform a meta-query on all Category items which match the where clause. 
  """
  _allCategoriesMeta(where: CategoryWhereInput, search: String, sortBy: [SortCategoriesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Category list. """
  _CategoriesMeta: _ListMeta

  """ Search for all SubCategory items which match the where clause. """
  allSubCategories(where: SubCategoryWhereInput, search: String, sortBy: [SortSubCategoriesBy!], orderBy: String, first: Int, skip: Int): [SubCategory]

  """ Search for the SubCategory item with the matching ID. """
  SubCategory(where: SubCategoryWhereUniqueInput!): SubCategory

  """ Perform a meta-query on all SubCategory items which match the where clause. 
  """
  _allSubCategoriesMeta(where: SubCategoryWhereInput, search: String, sortBy: [SortSubCategoriesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the SubCategory list. """
  _SubCategoriesMeta: _ListMeta

  """ Search for all Brand items which match the where clause. """
  allBrands(where: BrandWhereInput, search: String, sortBy: [SortBrandsBy!], orderBy: String, first: Int, skip: Int): [Brand]

  """ Search for the Brand item with the matching ID. """
  Brand(where: BrandWhereUniqueInput!): Brand

  """ Perform a meta-query on all Brand items which match the where clause. 
  """
  _allBrandsMeta(where: BrandWhereInput, search: String, sortBy: [SortBrandsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Brand list. """
  _BrandsMeta: _ListMeta

  """ Search for all Tag items which match the where clause. """
  allTags(where: TagWhereInput, search: String, sortBy: [SortTagsBy!], orderBy: String, first: Int, skip: Int): [Tag]

  """ Search for the Tag item with the matching ID. """
  Tag(where: TagWhereUniqueInput!): Tag

  """ Perform a meta-query on all Tag items which match the where clause. """
  _allTagsMeta(where: TagWhereInput, search: String, sortBy: [SortTagsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Tag list. """
  _TagsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Product item. """
  createProduct(data: ProductCreateInput): Product

  """ Create multiple Product items. """
  createProducts(data: [ProductsCreateInput]): [Product]

  """ Update a single Product item by ID. """
  updateProduct(id: ID!, data: ProductUpdateInput): Product

  """ Update multiple Product items by ID. """
  updateProducts(data: [ProductsUpdateInput]): [Product]

  """ Delete a single Product item by ID. """
  deleteProduct(id: ID!): Product

  """ Delete multiple Product items by ID. """
  deleteProducts(ids: [ID!]): [Product]

  """ Create a single CartItem item. """
  createCartItem(data: CartItemCreateInput): CartItem

  """ Create multiple CartItem items. """
  createCartItems(data: [CartItemsCreateInput]): [CartItem]

  """ Update a single CartItem item by ID. """
  updateCartItem(id: ID!, data: CartItemUpdateInput): CartItem

  """ Update multiple CartItem items by ID. """
  updateCartItems(data: [CartItemsUpdateInput]): [CartItem]

  """ Delete a single CartItem item by ID. """
  deleteCartItem(id: ID!): CartItem

  """ Delete multiple CartItem items by ID. """
  deleteCartItems(ids: [ID!]): [CartItem]

  """ Create a single Category item. """
  createCategory(data: CategoryCreateInput): Category

  """ Create multiple Category items. """
  createCategories(data: [CategoriesCreateInput]): [Category]

  """ Update a single Category item by ID. """
  updateCategory(id: ID!, data: CategoryUpdateInput): Category

  """ Update multiple Category items by ID. """
  updateCategories(data: [CategoriesUpdateInput]): [Category]

  """ Delete a single Category item by ID. """
  deleteCategory(id: ID!): Category

  """ Delete multiple Category items by ID. """
  deleteCategories(ids: [ID!]): [Category]

  """ Create a single SubCategory item. """
  createSubCategory(data: SubCategoryCreateInput): SubCategory

  """ Create multiple SubCategory items. """
  createSubCategories(data: [SubCategoriesCreateInput]): [SubCategory]

  """ Update a single SubCategory item by ID. """
  updateSubCategory(id: ID!, data: SubCategoryUpdateInput): SubCategory

  """ Update multiple SubCategory items by ID. """
  updateSubCategories(data: [SubCategoriesUpdateInput]): [SubCategory]

  """ Delete a single SubCategory item by ID. """
  deleteSubCategory(id: ID!): SubCategory

  """ Delete multiple SubCategory items by ID. """
  deleteSubCategories(ids: [ID!]): [SubCategory]

  """ Create a single Brand item. """
  createBrand(data: BrandCreateInput): Brand

  """ Create multiple Brand items. """
  createBrands(data: [BrandsCreateInput]): [Brand]

  """ Update a single Brand item by ID. """
  updateBrand(id: ID!, data: BrandUpdateInput): Brand

  """ Update multiple Brand items by ID. """
  updateBrands(data: [BrandsUpdateInput]): [Brand]

  """ Delete a single Brand item by ID. """
  deleteBrand(id: ID!): Brand

  """ Delete multiple Brand items by ID. """
  deleteBrands(ids: [ID!]): [Brand]

  """ Create a single Tag item. """
  createTag(data: TagCreateInput): Tag

  """ Create multiple Tag items. """
  createTags(data: [TagsCreateInput]): [Tag]

  """ Update a single Tag item by ID. """
  updateTag(id: ID!, data: TagUpdateInput): Tag

  """ Update multiple Tag items by ID. """
  updateTags(data: [TagsUpdateInput]): [Tag]

  """ Delete a single Tag item by ID. """
  deleteTag(id: ID!): Tag

  """ Delete multiple Tag items by ID. """
  deleteTags(ids: [ID!]): [Tag]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  addToCart(productId: ID): CartItem
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
